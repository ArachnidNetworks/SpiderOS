###############################################################################
# ABOUT PYTHON
##############

Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde &
Informatica (CWI) in the Netherlands as a successor to the ABC language (itself 
inspired by SETL), capable of exception handling and interfacing with the Amoeba 
operating system. Its implementation began in December 1989. Van Rossum 
shouldered sole responsibility for the project, as the lead developer, until 
July 12, 2018, when he announced his "permanent vacation" from his 
responsibilities as Python's Benevolent Dictator For Life, a title the Python 
community bestowed upon him to reflect his long-term commitment as the project's 
chief decision-maker. He now shares his leadership as a member of a five-person 
steering council. In January, 2019, active Python core developers elected Brett 
Cannon, Nick Coghlan, Barry Warsaw, Carol Willing and Van Rossum to a 
five-member "Steering Council" to lead the project.

Python 2.0 was released on 16 October 2000 with many major new features, 
including a cycle-detecting garbage collector and support for Unicode.

Python 3.0 was released on 3 December 2008. It was a major revision of the 
language that is not completely backward-compatible. Many of its major features
were backported to Python 2.6.x and 2.7.x version series. Releases of Python 3 
include the 2to3 utility, which automates (at least partially) the translation 
of Python 2 code to Python 3.

Python 2.7's end-of-life date was initially set at 2015 then postponed to 2020 
out of concern that a large body of existing code could not easily be 
forward-ported to Python 3.

###############################################################################
# FEATURES AND PHILOSOPHY
#########################

Python is a multi-paradigm programming language. Object-oriented programming and
structured programming are fully supported, and many of its features support 
functional programming and aspect-oriented programming (including by 
metaprogramming and metaobjects (magic methods)). Many other paradigms are 
supported via extensions, including design by contract and logic programming.

Python uses dynamic typing and a combination of reference counting and a 
cycle-detecting garbage collector for memory management. It also features 
dynamic name resolution (late binding), which binds method and variable names 
during program execution.

Python's design offers some support for functional programming in the Lisp 
tradition. It has filter, map, and reduce functions; list comprehensions, 
dictionaries, sets, and generator expressions. The standard library has two 
modules (itertools and functools) that implement functional tools borrowed from 
Haskell and Standard ML.

The language's core philosophy is summarized in the document The Zen of Python 
(PEP 20), which includes aphorisms such as:

    Beautiful is better than ugly.
    Explicit is better than implicit.
    Simple is better than complex.
    Complex is better than complicated.
    Readability counts.

Rather than having all of its functionality built into its core, Python was 
designed to be highly extensible. This compact modularity has made it 
particularly popular as a means of adding programmable interfaces to existing 
applications. Van Rossum's vision of a small core language with a large standard 
library and easily extensible interpreter stemmed from his frustrations with ABC 
which espoused the opposite approach.

Python strives for a simpler, less-cluttered syntax and grammar while giving 
developers a choice in their coding methodology. In contrast to Perl's "there is 
more than one way to do it" motto, Python embraces a "there should be one—and 
preferably only one—obvious way to do it" design philosophy. Alex Martelli, a 
Fellow at the Python Software Foundation and Python book author, writes that 
"To describe something as 'clever' is not considered a compliment in the Python 
culture."

Python's developers strive to avoid premature optimization, and reject patches 
to non-critical parts of the CPython reference implementation that would offer 
marginal increases in speed at the cost of clarity. When speed is important, a 
Python programmer can move time-critical functions to extension modules written 
in languages such as C, or use PyPy, a just-in-time compiler. Cython is also 
available, which translates a Python script into C and makes direct C-level API 
calls into the Python interpreter.

An important goal of Python's developers is keeping it fun to use. This is 
reflected in the language's name—a tribute to the British comedy group Monty 
Python—and in occasionally playful approaches to tutorials and reference 
materials, such as examples that refer to spam and eggs (from a famous Monty 
Python sketch) instead of the standard foo and bar.

A common neologism in the Python community is pythonic, which can have a wide 
range of meanings related to program style. To say that code is pythonic is to 
say that it uses Python idioms well, that it is natural or shows fluency in the 
language, that it conforms with Python's minimalist philosophy and emphasis on 
readability. In contrast, code that is difficult to understand or reads like a 
rough transcription from another programming language is called unpythonic.

Users and admirers of Python, especially those considered knowledgeable or 
experienced, are often referred to as Pythonistas.

###############################################################################
# SYNTAX AND SEMANTICS
######################

Python is meant to be an easily readable language. Its formatting is visually 
uncluttered, and it often uses English keywords where other languages use 
punctuation. Unlike many other languages, it does not use curly brackets to 
delimit blocks, and semicolons after statements are optional. It has fewer 
syntactic exceptions and special cases than C or Pascal.

Python uses whitespace indentation, rather than curly brackets or keywords, to 
delimit blocks. An increase in indentation comes after certain statements; a 
decrease in indentation signifies the end of the current block. Thus, the 
program's visual structure accurately represents the program's semantic 
structure. This feature is sometimes termed the off-side rule, which some other 
languages share, but in most languages indentation doesn't have any semantic 
meaning. 
